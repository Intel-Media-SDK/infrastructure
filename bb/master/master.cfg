# -*- python -*-
# ex: set filetype=python:

# Copyright (c) 2018 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from enum import Enum
import re

from buildbot.plugins import schedulers, changes, util, steps, worker, reporters
import config

class Stage(Enum): #TODO: use shared module?
    CLEAN = "clean"
    EXTRACT = "extract"
    BUILD = "build"
    INSTALL = "install"
    PACK = "pack"
    COPY = "copy"


def init_build_factory(conf_file="conf_open_source.py",
                       build_event="commit"): #TODO: change to PRODUCT
    build_factory = util.BuildFactory()
    #Build by stages: clean, extract, build, install, pack, copy
    for stage in Stage:
        build_factory.addStep(
            steps.ShellCommand(command=[config.RUN_COMMAND,
                                        "build_runner.py", #TODO: hardcoded path here
                                        "--build-config", util.Interpolate(r"%(prop:builddir)s/product-configs/%(kw:conf_file)s", conf_file=conf_file),
                                        "--root-dir", util.Interpolate(r"%(prop:builddir)s/build_dir"),
                                        "--changed-repo", util.Interpolate(config.REPO_INFO),
                                        "--build-type", config.BUILD_TYPE,
                                        "--build-event", build_event,
                                        "--stage", stage.value],
                               workdir=r"infrastructure/build_scripts",
                               name=stage.value))

    #Trigger tests
    if (build_event == "commit"):
        build_factory.addStep(steps.Trigger(schedulerNames=[config.TEST],
                                            waitForFinish=False,
                                            updateSourceStamp=True))
    else:
        build_factory.addStep(steps.Trigger(schedulerNames=[config.TEST_API_LATEST],
                                            waitForFinish=False,
                                            updateSourceStamp=True))
    return build_factory

def init_test_factory(build_event="commit"):
    test_factory = util.BuildFactory()
    test_factory.addStep(
        steps.ShellCommand(command=[config.RUN_COMMAND,
                                    "test_adapter.py",
                                    "--branch", util.Interpolate(r"%(prop:branch)s"),
                                    #"--build-event", util.Interpolate(r"%(prop:build-event)s"),
                                    "--build-event", build_event,
                                    "--commit-id", util.Interpolate(r"%(prop:revision)s"),
                                    "--build-type", config.BUILD_TYPE],
                            workdir=r"infrastructure/ted_adapter"))
    return build_factory


c = BuildmasterConfig = {}

c["workers"] = []

# Add workers
for worker_ in config.WORKERS.values():
    for w_name, prop in worker_.items():
        c["workers"].append(worker.Worker(w_name, config.WORKER_PASS,
                                          properties=prop,
                                          max_builds=1)) # To disable parallel builds on one worker

c["protocols"] = {"pb": {"port": config.WORKER_PORT}}

# Basic config
c["buildbotNetUsageData"] = config.BUILDBOT_NET_USAGE_DATA
c["title"] = config.BUILDBOT_TITLE
c["titleURL"] = config.BUILDBOT_TITLE_URL
c["buildbotURL"] = config.BUILDBOT_URL


# Schedulers
c["schedulers"] = [
    schedulers.SingleBranchScheduler(name=config.BUILD_MASTER,
                                     change_filter=util.ChangeFilter(project=config.GITHUB_REPOSITORY, branch="master"),
                                     treeStableTimer=config.BUILDBOT_TREE_STABLE_TIMER,
                                     builderNames=[config.BUILD_MASTER]),
    schedulers.SingleBranchScheduler(name=config.BUILD_NOT_MASTER,
                                     change_filter=util.ChangeFilter(project=config.GITHUB_REPOSITORY, branch_re="(?!master)"),
                                     treeStableTimer=config.BUILDBOT_TREE_STABLE_TIMER,
                                     builderNames=[config.BUILD_NOT_MASTER]),
    schedulers.SingleBranchScheduler(name=config.BUILD_API_LATEST,
                                     change_filter=util.ChangeFilter(project=config.GITHUB_REPOSITORY, branch_re=".+?"),
                                     treeStableTimer=config.BUILDBOT_TREE_STABLE_TIMER,
                                     builderNames=[config.BUILD_API_LATEST]),
    schedulers.Triggerable(name=config.TEST,
                           builderNames=[config.TEST]),
    schedulers.Triggerable(name=config.TEST_API_LATEST,
                           builderNames=[config.TEST_API_LATEST])]


#Init build factory for master
build_factory = init_build_factory("conf_open_source.py", "commit")

#TODO: api_latest
#TODO: init tests etc

#Init build factory for other branches
build_not_master_factory = init_build_factory("conf_open_source.py", "commit")

#TODO: start it parallel with 1st build
#build_not_master_factory.addStep(steps.Trigger(schedulerNames=[config.BUILD_API_LATEST],
#                                               waitForFinish=False,
#                                               updateSourceStamp=True))

#----
build_api_latest_factory = init_build_factory("conf_open_source_api_latest.py",
                                              "api_latest")
#add new scheduler and builder for tests for api latest

#build_api_latest_factory.addStep(steps.Trigger(schedulerNames=[config.TEST],
#                                               set_properties={"build-event": "api_latest"},
#                                               waitForFinish=False,
#                                               updateSourceStamp=True))
#----

#Tests
test_factory = init_test_factory("commit")
test_api_factory = init_test_factory("api_latest")
#test_factory.addStep(
#    steps.ShellCommand(command=[config.RUN_COMMAND,
#                                "test_adapter.py",
#                                "--branch", util.Interpolate(r"%(prop:branch)s"),
#                                "--build-event", "commit",
#                                "--commit-id", util.Interpolate(r"%(prop:revision)s"),
#                                "--build-type", config.BUILD_TYPE],
#                       workdir=r"infrastructure/ted_adapter"))


# Builders
c["builders"] = [
    util.BuilderConfig(name=config.BUILD_MASTER,
                       workernames=list(config.WORKERS[config.BUILD].keys()), #TODO: rewrite it?
                       factory=build_factory),
    util.BuilderConfig(name=config.BUILD_NOT_MASTER,
                       workernames=list(config.WORKERS[config.BUILD].keys()),
                       factory=build_not_master_factory),
    util.BuilderConfig(name=config.BUILD_API_LATEST,
                       workernames=list(config.WORKERS[config.BUILD].keys()),
                       factory=build_api_latest_factory),
    util.BuilderConfig(name=config.TEST,
                       workernames=list(config.WORKERS[config.TEST].keys()),
                       factory=test_factory),
    util.BuilderConfig(name=config.TEST_API_LATEST,
                       workernames=list(config.WORKERS[config.TEST].keys()),
                       factory=test_api_factory)]


# Push status of build to the Github
c["services"] = [
    reporters.GitHubStatusPush(token=config.GITHUB_TOKEN,
                               context=util.Interpolate("buildbot/%(prop:buildername)s"),
                               startDescription="Started",
                               endDescription="Done",
                               verbose=False)]
# Will be useful for implementing build notifications in the future
#    reporters.GitHubCommentPush(token=config.GITHUB_TOKEN,
#                                 startDescription="Started (comment)",
#                                 endDescription="Done (comment)",
#                                 verbose=True,
#                                 debug=True)]

# Web Interface
c["www"] = dict(port=int(config.PORT),
                plugins={"waterfall_view": True,
                         "console_view": True,
                         "grid_view": True})

# Database
c["db"] = {"db_url": config.DATABASE_URL}

c["collapseRequests"] = False # It disables automatic merging of requests
                              # (to build EACH commit)

# GitHub webhook receiver
c["www"]["change_hook_dialects"] = {
        "github": {
                "secret": config.GITHUB_WEBHOOK_SECRET,
                "strict": True,
        }
}
