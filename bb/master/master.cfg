# Copyright (c) 2018 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import time
import sys
import pathlib
from enum import Enum

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.github import GitHubPullrequestPoller
from buildbot.plugins import schedulers, util, steps, worker, reporters
from twisted.internet import defer

sys.path.append(str(pathlib.Path(__file__).resolve().parents[2]))
import config


class Stage(Enum):
    CLEAN = "clean"
    EXTRACT = "extract"
    BUILD = "build"
    INSTALL = "install"
    PACK = "pack"
    COPY = "copy"


@util.renderer
@defer.inlineCallbacks
def get_infrastructure_deploying_cmd(props):
    infrastructure_deploying_cmd = [
        config.RUN_COMMAND, 'extract_repo.py',
        '--repo-name', 'OPEN_SOURCE_INFRA',
        '--root-dir', props.getProperty("builddir")
    ]

    # Changes in product configs from Intel-Media-SDK/product-configs only will be deployed
    # Infrastructure for changes from any forks or Intel-Media-SDK/MediaSDK repository
    # will be deployed from master branch of Intel-Media-SDK/product-configs repository
    if props.getProperty('repository') == config.PRODUCT_CONFIGS_REPO_URL:
        infrastructure_deploying_cmd += ['--commit-id', props.getProperty("revision"),
                                         '--branch', props.getProperty("branch")]
    else:
        build_id = props.build.buildid
        sourcestamps = yield props.build.master.db.sourcestamps.getSourceStampsForBuild(build_id)
        sourcestamps_created_time = sourcestamps[0]['created_at'].timestamp()
        formatted_sourcestamp_created_time = time.strftime('%Y-%m-%d %H:%M:%S',
                                                           time.localtime(sourcestamps_created_time))
        infrastructure_deploying_cmd += ['--commit-time', formatted_sourcestamp_created_time,
                                         '--branch', 'master']

    defer.returnValue(infrastructure_deploying_cmd)


@util.renderer
def get_changed_repo(props):
    repo_url = props.getProperty('repository')
    branch = props.getProperty('branch')
    revision = props.getProperty('revision')
    # Some magic for getting repository name from url
    # https://github.com/Intel-Media-SDK/product-configs.git -> product-configs
    repo_name = repo_url.split('/')[-1][:-4]
    return f"{repo_name}:{branch}:{revision}"


def factory_with_deploying_infrastructure_step():
    factory = util.BuildFactory()
    factory.addStep(
        steps.ShellCommand(name='deploying infrastructure',
                           command=get_infrastructure_deploying_cmd,
                           workdir=r'../common'))
    return factory


def init_build_factory(build_specification):
    conf_file = build_specification["product_conf_file"]
    product_type = build_specification["product_type"]
    build_type = build_specification["build_type"]
    api_latest = build_specification["api_latest"]
    fastboot = build_specification["fastboot"]
    compiler = build_specification["compiler"]
    compiler_version = build_specification["compiler_version"]
    build_factory = factory_with_deploying_infrastructure_step() if config.DEPLOYING_INFRASTRUCTURE\
        else util.BuildFactory()

    # Build by stages: clean, extract, build, install, pack, copy
    for stage in Stage:
        shell_commands = [config.RUN_COMMAND,
                          "build_runner.py",
                          "--build-config",
                          util.Interpolate(r"%(prop:builddir)s/product-configs/%(kw:conf_file)s",
                                           conf_file=conf_file),
                          "--root-dir", util.Interpolate(r"%(prop:builddir)s/build_dir"),
                          "--changed-repo", get_changed_repo,
                          "--build-type", build_type,
                          "--build-event", "commit",
                          "--product-type", product_type,
                          "--repo-url", util.Interpolate(r"%(prop:repository)s"),
                          "--stage", stage.value,
                          f"compiler={compiler}",
                          f"compiler_version={compiler_version}",
                          ]
        if api_latest:
            shell_commands.append("api_latest=True")
        if fastboot:
            shell_commands.append("fastboot=True")

        build_factory.addStep(
            steps.ShellCommand(command=shell_commands,
                               workdir=r"infrastructure/build_scripts",
                               name=stage.value))

    # Trigger tests
    # Tests will be triggered only if product types are similar
    # Currently they will be triggered only for `build-master-branch`, `build`, `build-api-next`
    for test_specification in config.TESTERS:
        if product_type == test_specification["product_type"]:
            build_factory.addStep(steps.Trigger(schedulerNames=[test_specification["name"]],
                                                waitForFinish=False,
                                                updateSourceStamp=True))
    return build_factory


def init_test_factory(test_specification):
    product_type = test_specification["product_type"]
    build_type = test_specification["build_type"]
    test_factory = factory_with_deploying_infrastructure_step() if config.DEPLOYING_INFRASTRUCTURE\
        else util.BuildFactory()

    test_factory.addStep(
        steps.ShellCommand(command=[config.RUN_COMMAND,
                                    "test_adapter.py",
                                    "--branch", util.Interpolate(r"%(prop:branch)s"),
                                    "--build-event", "commit",
                                    "--product-type", product_type,
                                    "--commit-id", util.Interpolate(r"%(prop:revision)s"),
                                    "--build-type", build_type,
                                    "--root-dir", util.Interpolate(r"%(prop:builddir)s/build_dir"),
                                    ],
                           workdir=r"infrastructure/ted_adapter"))
    return test_factory


c = BuildmasterConfig = {}

# Add workers
c["workers"] = []
for worker_ in config.WORKERS.values():
    for w_name, prop in worker_.items():
        c["workers"].append(worker.Worker(w_name, config.WORKER_PASS,
                                          properties=prop,
                                          max_builds=1))  # To disable parallel builds on one worker

# Basic config
c["protocols"] = {"pb": {"port": config.WORKER_PORT}}
c["buildbotNetUsageData"] = config.BUILDBOT_NET_USAGE_DATA
c["title"] = config.BUILDBOT_TITLE
c["titleURL"] = config.REPO_URL
c["buildbotURL"] = config.BUILDBOT_URL


def get_workers(worker_pool):
    return list(config.WORKERS[worker_pool].keys())


# Create schedulers and builders for builds
c["schedulers"] = []
c["builders"] = []
for build_specification in config.BUILDERS:
    c["schedulers"].append(schedulers.SingleBranchScheduler(name=build_specification["name"],
                                                            change_filter=util.ChangeFilter(
                                                                category="mediasdk",
                                                                branch_re=build_specification[
                                                                    "branch"]),
                                                            treeStableTimer=config.BUILDBOT_TREE_STABLE_TIMER,
                                                            builderNames=[
                                                                build_specification["name"]]))
    c["builders"].append(util.BuilderConfig(name=build_specification["name"],
                                            workernames=get_workers(build_specification["worker"]),
                                            factory=init_build_factory(build_specification)))

# Create schedulers and builders for tests
for test_specification in config.TESTERS:
    c["schedulers"].append(schedulers.Triggerable(name=test_specification["name"],
                                                  builderNames=[test_specification["name"]]))
    c["builders"].append(util.BuilderConfig(name=test_specification["name"],
                                            workernames=get_workers(test_specification["worker"]),
                                            factory=init_test_factory(test_specification)))

# Push status of build to the Github
c["services"] = [
    reporters.GitHubStatusPush(token=config.GITHUB_TOKEN,
                               context=util.Interpolate("buildbot/%(prop:buildername)s"),
                               startDescription="Started",
                               endDescription="Done",
                               verbose=True)]
# Will be useful for implementing build notifications in the future
#    reporters.GitHubCommentPush(token=config.GITHUB_TOKEN,
#                                 startDescription="Started (comment)",
#                                 endDescription="Done (comment)",
#                                 verbose=True,
#                                 debug=True)]

# Get changes
c["change_source"] = []


def pull_request_filter(pull_request_message):
    # Include only changes from fork repositories
    if pull_request_message["head"]["repo"] and pull_request_message["head"]["repo"][
        "full_name"] == config.GITHUB_REPOSITORY:
        return False
    return True


# To process only the changes from forked MediaSDK repositories
c["change_source"].append(GitHubPullrequestPoller(
    owner=config.GITHUB_OWNER,
    repo=config.GITHUB_OWNERS_REPO,
    token=config.GITHUB_TOKEN,
    pullrequest_filter=pull_request_filter,
    category="mediasdk",
    pollInterval=config.POLL_INTERVAL,  # Interval of PR`s checking
    pollAtLaunch=True))

# To process changes from Intel-Media-SDK/MediaSDK repository
c["change_source"].append(GitPoller(
    repourl=f"{config.REPO_URL}.git",
    # Directory for the output of git remote-ls command
    # WARNING: Changing workdir may cause incorrect work of git poller
    workdir="gitpoller-workdir",
    # Poll all branches
    branches=True,
    category="mediasdk",
    pollInterval=config.POLL_INTERVAL,
    pollAtLaunch=True))

# To process changes from Intel-Media-SDK/product-configs repository
c["change_source"].append(GitPoller(
    repourl=config.PRODUCT_CONFIGS_REPO_URL,
    workdir=f"gitpoller-{config.PRODUCT_CONFIGS_REPO}",
    # Poll all branches
    branches=True,
    category="mediasdk",
    pollInterval=config.POLL_INTERVAL,
    pollAtLaunch=True))

# Web Interface
c["www"] = dict(port=int(config.PORT),
                plugins={"console_view": True})

# Database
c["db"] = {"db_url": config.DATABASE_URL}

# It disables automatic merging of requests (to build EACH commit)
c["collapseRequests"] = False
